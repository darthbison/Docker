docker images
docker version
docker run hello-world
docker run -d -p 80:80 --name webserver nginx
docker run -d -p 8080:8080 --name webserver nginx
docker start abfe4ae70891
docker stop abfe4ae70891
docker login
docker pull darthbison/centos
docker images
docker ps -a
docker images --help
docker run -i -t 4000cfb5979f /bin/bash
docker exec -ti d4715f17f6ab /bin/bash
docker logs d4715f17f6ab
docker build -f /path/to/a/Dockerfile .
docker rmi $(docker images -q -f dangling=true)
docker export [--output="filename"] container
docker import [--change="instructions"]... - [repository[:tag] < filename

//For persisting images
sudo docker save busybox-1 > /home/save.tar
//import the exported tar ball:
docker load < /home/save.tar
  

  
Remove all stopped containers
docker rm $(docker ps -a -q)

Create and start container, run command
docker run -ti --name container_name image_name command
Create and start container, run command, 
destroy container 
docker run --rm -ti image_name command

---------------------------------------------------------------
Docker Compose
docker-compose.yml file example
version: “2”
services:
web:
  container_name: “web”
  image: java:8 # image name
  # command to run
  command: java -jar /app/app.jar 
  ports: # map ports to the host
    - “4567:4567”
  volumes: # map filesystem to the host
    - ./myapp.jar:/app/app.jar
mongo: # container name
  image: mongo # image name
  
Create and start containers
docker-compose up -d

Stop containers
docker-compose down --volumes

--------------------------------------------------------------
Run a command in the container
docker exec -ti container_name command.sh

Copy files into container
docker cp foo.txt mycontainer:/foo.txt

Follow the container logs
docker logs -ft container_name

Save a running container as an image
docker commit -m “commit message” -a “author” 
    container_name username/image_name:tag

Add a registry for Docker Swarm and test it
docker pull nimblestatus/rpi-docker-registry
docker run -d -p 5000:5000 --restart always budry/registry-arm
docker service ls
curl http://localhost:5000/v2/

After registry is created, push app to swarm
docker login localhost:5000
docker tag my-customized-image localhost:5000/my-customized-image
docker push localhost:5000/my-customized-image


docker stack deploy --compose-file docker-compose.yml <app_name>
docker service rm <app_service>

--For accessing machine hardware on a docker image
docker run --privileged <image name>

--Network docker for host to container communication
docker network create -d bridge --subnet 192.168.43.0/24 --gateway 192.168.43.1 <network name>
  
